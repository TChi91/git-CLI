Rebase Commands

Let's take another look at the different commands that you can do with git rebase:

    use p or pick – to keep the commit as is
    use r or reword – to keep the commit's content but alter the commit message
    use e or edit – to keep the commit's content but stop before committing so that you can:
        add new content or files
        remove content or files
        alter the content that was going to be committed
    use s or squash – to combine this commit's changes into the previous commit (the commit above it in the list)
    use f or fixup – to combine this commit's change into the previous one but drop the commit message
    use x or exec – to run a shell command
    use d or drop – to delete the commit

When to rebase

As you've seen, the git rebase command is incredibly powerful. It can help you edit commit messages, reorder commits, combine commits, etc. So it truly is a powerhouse of a tool. Now the question becomes "When should you rebase?".

Whenever you rebase commits, Git will create a new SHA for each commit! This has drastic implications. To Git, the SHA is the identifier for a commit, so a different identifier means it's a different commit, regardless if the content has changed at all.

So you should not rebase if you have already pushed the commits you want to rebase. If you're collaborating with other developers, then they might already be working with the commits you've pushed. If you then use git rebase to change things around and then force push the commits, then the other developers will now be out of sync with the remote repository. They will have to do some complicated surgery to their Git repository to get their repo back in a working state...and it might not even be possible for them to do that; they might just have to scrap all of their work and start over with your newly-rebased, force-pushed commits.
Recap

The git rebase command is used to do a great many things.

# interactive rebase
$ git rebase -i <base>

# interactively rebase the commits to the one that's 3 before the one we're on
$ git rebase -i HEAD~3

Inside the interactive list of commits, all commits start out as pick, but you can swap that out with one of the other commands (reword, edit, squash, fixup, exec, and drop).

I recommend that you create a backup branch before rebasing, so that it's easy to return to your previous state. If you're happy with the rebase, then you can just delete the backup branch!
Further Research

    Git Branching - Rebasing from the Git Book
    git-rebase from the Git Docs
    https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase from the Atlassian blog

